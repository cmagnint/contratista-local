// change-password.component.ts
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { ContratistaApiService } from '../../services/contratista-api.service';

@Component({
  selector: 'app-change-password',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './change-password.component.html',
  styleUrls: ['./change-password.component.css']
})
export class ChangePasswordComponent implements OnInit {
  
  // Datos del formulario
  public nuevaContrasena: string = '';
  public confirmarContrasena: string = '';
  public isLoading: boolean = false;
  
  // Datos de verificaci√≥n
  public rut: string = '';
  public codigo: string = '';
  
  // Estados del componente
  public showPassword: boolean = false;
  public showConfirmPassword: boolean = false;

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private toastr: ToastrService,
    private contratistaApiService: ContratistaApiService
  ) {}

  ngOnInit(): void {
    // Obtener par√°metros de la URL
    this.route.queryParams.subscribe(params => {
      this.rut = params['rut'] || '';
      this.codigo = params['code'] || '';
      
      console.log('üìÑ Par√°metros recibidos:', { rut: this.rut, codigo: this.codigo });
      
      // Verificar que tengamos los par√°metros necesarios
      if (!this.rut || !this.codigo) {
        this.toastr.error('Par√°metros de verificaci√≥n faltantes', 'Error');
        this.router.navigate(['/login']);
        return;
      }
    });
  }

  /**
   * ‚úÖ Cambia la contrase√±a usando la API unificada
   */
  changePassword(): void {
    // Validaciones b√°sicas
    if (!this.validarFormulario()) {
      return;
    }

    this.isLoading = true;
    console.log('üîê Cambiando contrase√±a para RUT:', this.rut);

    // ‚úÖ NUEVA API UNIFICADA con action
    this.contratistaApiService.post('password-reset/', {
      action: 'change_password',
      rut: this.rut,
      nuevaContrasena: this.nuevaContrasena,
      codigo: this.codigo  // Verificaci√≥n de seguridad adicional
    }).subscribe({
      next: (response: any) => {
        console.log('‚úÖ Respuesta cambio contrase√±a:', response);
        
        if (response.status === 'success') {
          this.toastr.success('Contrase√±a cambiada exitosamente', '√âxito');
          
          // Limpiar formulario
          this.nuevaContrasena = '';
          this.confirmarContrasena = '';
          
          // Redirigir al login despu√©s de 2 segundos
          setTimeout(() => {
            this.router.navigate(['/login']);
          }, 2000);
          
        } else {
          this.toastr.error(response.message || 'Error al cambiar contrase√±a', 'Error');
        }
      },
      error: (error) => {
        console.error('‚ùå Error al cambiar contrase√±a:', error);
        
        let errorMessage = 'Error al cambiar contrase√±a';
        if (error.error?.message) {
          errorMessage = error.error.message;
        } else if (typeof error.error === 'string') {
          errorMessage = error.error;
        }
        
        this.toastr.error(errorMessage, 'Error');
      },
      complete: () => {
        this.isLoading = false;
      }
    });
  }

  /**
   * ‚úÖ Valida el formulario antes de enviar
   */
  private validarFormulario(): boolean {
    // Verificar campos vac√≠os
    if (!this.nuevaContrasena.trim()) {
      this.toastr.error('Por favor ingrese la nueva contrase√±a', 'Error');
      return false;
    }

    if (!this.confirmarContrasena.trim()) {
      this.toastr.error('Por favor confirme la nueva contrase√±a', 'Error');
      return false;
    }

    // Verificar que las contrase√±as coincidan
    if (this.nuevaContrasena !== this.confirmarContrasena) {
      this.toastr.error('Las contrase√±as no coinciden', 'Error');
      return false;
    }

    // Verificar longitud m√≠nima
    if (this.nuevaContrasena.length < 6) {
      this.toastr.error('La contrase√±a debe tener al menos 6 caracteres', 'Error');
      return false;
    }

    // Verificar que no sean par√°metros de verificaci√≥n
    if (!this.rut || !this.codigo) {
      this.toastr.error('Sesi√≥n de verificaci√≥n inv√°lida', 'Error');
      this.router.navigate(['/login']);
      return false;
    }

    return true;
  }

  /**
   * ‚úÖ Toggle para mostrar/ocultar contrase√±a
   */
  togglePasswordVisibility(): void {
    this.showPassword = !this.showPassword;
  }

  /**
   * ‚úÖ Toggle para mostrar/ocultar confirmaci√≥n de contrase√±a
   */
  toggleConfirmPasswordVisibility(): void {
    this.showConfirmPassword = !this.showConfirmPassword;
  }

  /**
   * ‚úÖ Cancelar y volver al login
   */
  cancelar(): void {
    if (this.nuevaContrasena || this.confirmarContrasena) {
      if (confirm('¬øEst√° seguro que desea cancelar? Se perder√°n los cambios.')) {
        this.router.navigate(['/login']);
      }
    } else {
      this.router.navigate(['/login']);
    }
  }

  /**
   * ‚úÖ Validaci√≥n en tiempo real de coincidencia de contrase√±as
   */
  onConfirmPasswordChange(): void {
    if (this.confirmarContrasena && this.nuevaContrasena !== this.confirmarContrasena) {
      // Puedes a√±adir una clase CSS para mostrar error visualmente
    }
  }

  // ============================================
  // üéØ M√âTODOS PARA VALIDACI√ìN DE FORTALEZA
  // ============================================

  /**
   * ‚úÖ Verifica si la contrase√±a es d√©bil
   */
  isWeakPassword(): boolean {
    return this.nuevaContrasena.length < 6;
  }

  /**
   * ‚úÖ Verifica si la contrase√±a es media
   */
  isMediumPassword(): boolean {
    return this.nuevaContrasena.length >= 6 && this.nuevaContrasena.length < 8;
  }

  /**
   * ‚úÖ Verifica si la contrase√±a es fuerte
   */
  isStrongPassword(): boolean {
    return this.nuevaContrasena.length >= 8 && 
           /[A-Z]/.test(this.nuevaContrasena) && 
           /[0-9]/.test(this.nuevaContrasena);
  }

  /**
   * ‚úÖ Obtiene el texto de fortaleza de la contrase√±a
   */
  getPasswordStrengthText(): string {
    if (this.isStrongPassword()) return 'Fuerte';
    if (this.isMediumPassword()) return 'Media';
    if (this.isWeakPassword()) return 'D√©bil';
    return '';
  }

  /**
   * ‚úÖ Obtiene la clase CSS para el indicador de fortaleza
   */
  getPasswordStrengthClass(): string {
    if (this.isStrongPassword()) return 'strong';
    if (this.isMediumPassword()) return 'medium';
    if (this.isWeakPassword()) return 'weak';
    return '';
  }
}